name: CI/CD Pipeline (main only)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-24.04 # ‚úÖ ÏÑúÎ≤Ñ Î≤ÑÏ†ÑÏóê ÎßûÏ∂§
    env:
      IMAGE_NAME: zerojae175/sigorotalk
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (production)
        run: |
          echo "üì¶ Building production image..."
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${IMAGE_NAME}:cache \
            --cache-to=type=registry,ref=${IMAGE_NAME}:cache,mode=max \
            -f Dockerfile \
            -t ${IMAGE_NAME}:main_${IMAGE_TAG} \
            -t ${IMAGE_NAME}:latest \
            --push .

  deploy:
    runs-on: ubuntu-24.04 # ‚úÖ ÏÑúÎ≤Ñ Î≤ÑÏ†ÑÏóê ÎßûÏ∂§
    needs: build
    env:
      IMAGE_NAME: zerojae175/sigorotalk
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            TAG="latest"
            CONTAINER_NAME="sigorotalk-app"
            PORT="${{ secrets.SERVER_PORT }}"
            DB_URL="${{ secrets.DB_URL }}"

            echo "üîé Checking deployment variables..."
            echo "IMAGE_NAME: $IMAGE_NAME"
            echo "TAG: $TAG"
            echo "CONTAINER_NAME: $CONTAINER_NAME"
            echo "PORT: $PORT"
            echo "DB_URL: $DB_URL"

            echo "üì• Pulling Docker image: $IMAGE_NAME:$TAG"
            docker pull $IMAGE_NAME:$TAG

            echo "üßπ Removing dangling images (if any)..."
            docker image prune -f || true

            echo "üõë Stopping and removing existing container: $CONTAINER_NAME (if exists)"
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "üöÄ Running new container: $CONTAINER_NAME"
            docker run -d --restart unless-stopped \
              --name $CONTAINER_NAME \
              -p ${PORT}:${PORT} \
              --add-host=host.docker.internal:host-gateway \
              -e SPRING_PROFILES_ACTIVE=production \
              -e SERVER_PORT=$PORT \
              -e DB_URL=$DB_URL \
              -e DB_DRIVER="${{ secrets.DB_DRIVER }}" \
              -e DB_DIALECT="${{ secrets.DB_DIALECT }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              $IMAGE_NAME:$TAG

            echo "‚úÖ Deployment complete!"
